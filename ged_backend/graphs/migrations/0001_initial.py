# Generated by Django 5.1.4 on 2025-07-15 10:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('landscape', '0009_alter_abstract_options_alter_country_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscriminantScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_x', models.FloatField()),
                ('score_y', models.FloatField()),
                ('country', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.CharField(choices=[('Tier 1', 'Tier 1'), ('Tier 2', 'Tier 2'), ('Tier 3', 'Tier 3')], max_length=10)),
                ('equipment', models.CharField(choices=[('sequencer', 'Next-Gen Sequencer'), ('pcr', 'PCR Machine'), ('centrifuge', 'Centrifuge'), ('electrophoresis', 'Electrophoresis'), ('ms', 'Mass Spectrophotometer'), ('laminar_hood', 'Laminar Hood'), ('microscope', 'Fluorescent Microscope'), ('lc', 'Liquid Chromatography'), ('incubator', 'Incubator/Shaker'), ('others', 'Others')], max_length=20)),
                ('mean_score', models.FloatField()),
                ('std_error', models.FloatField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='ExperienceScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean_score', models.FloatField()),
                ('std_error', models.FloatField()),
                ('country', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='FundedProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('crops', 'Crops'), ('livestock', 'Livestock'), ('microbes', 'Microbes/Soil'), ('fisheries', 'Fisheries/Marine'), ('agroforestry', 'Agroforestry')], max_length=20)),
                ('count', models.PositiveIntegerField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='GedResearchScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.CharField(choices=[('Tier 1', 'Tier 1'), ('Tier 2', 'Tier 2'), ('Tier 3', 'Tier 3')], max_length=10)),
                ('mean_score', models.FloatField()),
                ('std_error', models.FloatField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='GraphRegulatoryFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biosafety_law', models.CharField(blank=True, max_length=100)),
                ('ministerial_decree', models.CharField(blank=True, max_length=100)),
                ('biosafety_regulations', models.CharField(blank=True, max_length=100)),
                ('ged_guidelines', models.CharField(blank=True, max_length=100)),
                ('ged_apps_received', models.PositiveIntegerField(blank=True, null=True)),
                ('ged_apps_approved', models.PositiveIntegerField(blank=True, null=True)),
                ('country', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='graphs_regulatory_framework', to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='KnowledgeScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mean_score', models.FloatField()),
                ('std_error', models.FloatField()),
                ('country', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='StaffExpertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('expertise', models.CharField(choices=[('molecular', 'Molecular Biology'), ('bioinformatics', 'Bioinformatics'), ('plant_breeding', 'Plant Breeding'), ('policy', 'Policy/Regulatory'), ('other', 'Other')], max_length=30)),
                ('count', models.PositiveIntegerField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
        migrations.CreateModel(
            name='StaffQualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('qualification', models.CharField(choices=[('bsc', 'BSc'), ('msc', 'MSc'), ('phd', 'PhD'), ('postdoc', 'Postdoc')], max_length=20)),
                ('count', models.PositiveIntegerField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='landscape.country')),
            ],
        ),
    ]
